import{a as x,b as v}from"./chunk-4KUSLUNE.js";import{a as k,b as S}from"./chunk-UL67FB7Q.js";import{Ba as r,Ga as n,Ha as e,Ia as p,O as g,Za as t,da as m,eb as y,fb as l,gb as h,ha as c,hb as f,la as s,ma as u,xb as w}from"./chunk-ZQROOWMS.js";var M=(()=>{class o{constructor(i){this.elementRef=i,this.myValue="print('hello-world')"}ngOnInit(){this.setHeadings()}setHeadings(){let i=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(a=>i.push(a)),this.headings=i}static{this.\u0275fac=function(a){return new(a||o)(u(m))}}static{this.\u0275cmp=g({type:o,selectors:[["app-syntax-highlight"]],standalone:!0,features:[y],decls:25,vars:10,consts:[[3,"headings"],["id","getting-started"],["id","auto-detect"],[3,"src"],["id","interpolation"],["emoji",""],["id","language-pipe"],[3,"innerHTML"]],template:function(a,d){a&1&&(n(0,"app-scrollspy-nav-layout",0)(1,"h1",1),t(2,"Syntax Highlight"),e(),n(3,"section")(4,"h2",2),t(5,"Auto-Detect"),e(),n(6,"markdown"),t(7,`
      When using the \`src\` input property to load file remotely, language for syntax highlight will be auto-detected based on the loaded file extension.

      The following example...

      \`\`\`html
      <markdown [src]="'app/syntax-highlight/remote/for-loop.js'"></markdown>
      \`\`\`

      Would render with Javascript syntax highlight based on the \`js\` file extension.
    `),e(),p(8,"markdown",3),e(),n(9,"section")(10,"h2",4),t(11,"Interpolation"),e(),n(12,"markdown",5),t(13,"\n      > :bulb: Using interpolation requires the uses of `ngPreserveWhitespaces` to keep indentation and spaces untouched during compilation.\n\n      When using [interpolation](https://angular.io/guide/template-syntax#interpolation-), the language for code block must be specified after the first three backticks.\n\n      ````html\n      <markdown ngPreserveWhitespaces>\n        ```typescript\n        export function greetings(name: string): string &#123;\n          return 'Hello ' + name;\n        }\n        ```\n      </markdown>\n      ````\n      ##### _* Characters such as `<, >, {, }` directly written in the HTML template file must be escaped so that the compiler doesn't try to bind it as regular Angular code_.\n\n      Would render with TypeScript syntax highlight based on the specified `typescript` language.\n    "),e(),n(14,"markdown"),t(15,"\n      ```typescript\n      export function greetings(name: string): string {\n        return 'Hello ' + name;\n      }\n      ```\n    "),e()(),n(16,"section")(17,"h2",6),t(18,"Language Pipe"),e(),n(19,"markdown"),t(20,"\n      When using the `markdown` pipe, you can specify the syntax highlight language by chaining the `language` pipe.\n\n      For example, having the python code `print('hello world')` into the `myValue` variable could be parsed specifying the language as follow...\n\n      ````\n      ```html\n      <div [innerHTML]=\"myValue | language : 'python' | markdown | async\"><div>\n      ```\n      ````\n\n      Would render with Python syntax highlight as specified with the `language` pipe in front of the `markdown` pipe.\n    "),e(),p(21,"div",7),l(22,"language"),l(23,"markdown"),l(24,"async"),e()()),a&2&&(r("headings",d.headings),s(8),r("src","app/syntax-highlight/remote/for-loop.js"),s(13),r("innerHTML",h(24,8,h(23,6,f(22,3,d.myValue,"python"))),c))},dependencies:[w,x,k,v,S],styles:["[_nghost-%COMP%]{display:block}"],changeDetection:0})}}return o})();export{M as default};
