import{a as w,b as k}from"./chunk-TANGDGL2.js";import{a as v,b as E}from"./chunk-24RKEVHA.js";import{Ab as x,Fa as o,Ka as n,La as e,Ma as s,aa as m,bb as t,ha as c,ib as l,jb as p,kb as f,la as r,ma as u,ra as y}from"./chunk-XUHCC3XM.js";var h=class d{constructor(a){this.elementRef=a;this.myValue="print('hello-world')"}ngOnInit(){this.setHeadings()}setHeadings(){let a=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(i=>a.push(i)),this.headings=a}static{this.\u0275fac=function(i){return new(i||d)(u(m))}}static{this.\u0275cmp=y({type:d,selectors:[["app-syntax-highlight"]],decls:25,vars:10,consts:[[3,"headings"],["id","getting-started"],["id","auto-detect"],[3,"src"],["id","interpolation"],["emoji",""],["id","language-pipe"],[3,"innerHTML"]],template:function(i,g){i&1&&(n(0,"app-scrollspy-nav-layout",0)(1,"h1",1),t(2,"Syntax Highlight"),e(),n(3,"section")(4,"h2",2),t(5,"Auto-Detect"),e(),n(6,"markdown"),t(7,`
      When using the \`src\` input property to load file remotely, language for syntax highlight will be auto-detected based on the loaded file extension.

      The following example...

      \`\`\`html
      <markdown [src]="'app/syntax-highlight/remote/for-loop.js'"></markdown>
      \`\`\`

      Would render with Javascript syntax highlight based on the \`js\` file extension.
    `),e(),s(8,"markdown",3),e(),n(9,"section")(10,"h2",4),t(11,"Interpolation"),e(),n(12,"markdown",5),t(13,"\n      > :bulb: Using interpolation requires the uses of `ngPreserveWhitespaces` to keep indentation and spaces untouched during compilation.\n\n      When using [interpolation](https://angular.io/guide/template-syntax#interpolation-), the language for code block must be specified after the first three backticks.\n\n      ````html\n      <markdown ngPreserveWhitespaces>\n        ```typescript\n        export function greetings(name: string): string &#123;\n          return 'Hello ' + name;\n        }\n        ```\n      </markdown>\n      ````\n      ##### _* Characters such as `<, >, {, }` directly written in the HTML template file must be escaped so that the compiler doesn't try to bind it as regular Angular code_.\n\n      Would render with TypeScript syntax highlight based on the specified `typescript` language.\n    "),e(),n(14,"markdown"),t(15,"\n      ```typescript\n      export function greetings(name: string): string {\n        return 'Hello ' + name;\n      }\n      ```\n    "),e()(),n(16,"section")(17,"h2",6),t(18,"Language Pipe"),e(),n(19,"markdown"),t(20,"\n      When using the `markdown` pipe, you can specify the syntax highlight language by chaining the `language` pipe.\n\n      For example, having the python code `print('hello world')` into the `myValue` variable could be parsed specifying the language as follow...\n\n      ````\n      ```html\n      <div [innerHTML]=\"myValue | language : 'python' | markdown | async\"><div>\n      ```\n      ````\n\n      Would render with Python syntax highlight as specified with the `language` pipe in front of the `markdown` pipe.\n    "),e(),s(21,"div",7),l(22,"language"),l(23,"markdown"),l(24,"async"),e()()),i&2&&(o("headings",g.headings),r(8),o("src","app/syntax-highlight/remote/for-loop.js"),r(13),o("innerHTML",p(24,8,p(23,6,f(22,3,g.myValue,"python"))),c))},dependencies:[x,w,v,k,E],styles:["[_nghost-%COMP%]{display:block}"],changeDetection:0})}};export{h as default};
